if (k0_new == k0){
break
}
}
while(TRUE){
k0 <- k0_new
if (k0==0){
T_trimmed <- sort(dat$Tn)
} else {
T_trimmed <- head(T_sorted,-k0)
}
avg_T <- mean(T_trimmed)
T_centered <- T_trimmed-avg_T
ranks <- find_ranks(T_centered,avgT)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
print(k0_new)
if (k0_new == k0){
break
}
}
S_rank
k0_new
n
4*18-21*22
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix,decreasing = T)
return(ranks)
}
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avgT)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
print(k0_new)
if (k0_new == k0){
break
}
}
S_rank
k0_new
k0
while(TRUE){
k0 <- k0_new
print(k0)
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avgT)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
print(k0_new)
if (k0_new == k0){
break
}
}
(4*S_rank-n*(n+1))/(2*n-1))
(4*S_rank-n*(n+1))/(2*n-1)
S_rank
k0_new
k=
)
k0
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
avg_T
T_trimmed
T-sorted
T_sorted
avg_T
avg_T <- mean(T_sorted)
avg_T
avg_T <- mean(T_trimmed)
T_centered <- T_sorted-avg_T
T_centered
avg_T
ranks <- find_ranks(T_centered,avgT)
ranks <- find_ranks(T_centered,avg_T)
ranks
S_rank <- sum(ranks[ranks>0])
S_rank
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
k0_new
print(k0_new)
k0
k0 <- k0_new
print(k0)
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
print(k0_new)
if (k0_new == k0){
break
}
k0 <- k0_new
print(k0)
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
S_rank
(4*S_rank-n*(n+1))/(2*n-1)
T_avg
avg_T
k0
k0 <- 1
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
avg_T
(4*S_rank-n*(n+1))/(2*n-1)
(4*S_rank-n*(n+1))/(2*n-1)
(4*S_rank-n*(n+1))/(2*n-1)
ranks
k0
i <- 0
while(i>5){
k0 <- k0_new
print(k0)
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new == k0){
break
}
i<- i+1
}
i <- 0
while(i<5){
k0 <- k0_new
print(k0)
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new == k0){
break
}
i<- i+1
}
i <- 0
while(i<5){
print(k0_new)
print(k0)
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new == k0){
break
}
i<- i+1
}
while(TRUE){
print(k0_new)
print(k0)
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
trim_and_fill <- function(dat){
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix,decreasing = T)
return(ranks)
}
i <- 0
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
}
help(sort)
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn,decreasing=T)
k0 <- 0
k0_new <- 0
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn,decreasing=T)
T_sorted
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix,decreasing = T)
return(ranks)
}
T_sorted
ranks
sort(abs(T_centered))
sort(abs(T_centered),index.return=T)
ranks <- sign(T_centered[ix])*sort(ix,decreasing = T)
ranks
ranks <- sign(T_centered[ix])*sort(ix)
ranks
trim_and_fill <- function(dat){
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix)
return(ranks)
}
i <- 0
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
}
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix)
return(ranks)
}
i <- 0
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
k0_new
k0
S_rank
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
k0_new
T_sorted
ranks
T_centered
T_sorted <- sort(dat$Tn)
avg_T <- mean(T_sorted)
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
ranks
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
k0_new
n
(4*S_rank-n*(n+1))/(2*n-1)
T_filled <- c(T_centered,tail(T_centered[ranks>0],k0))
T_filled
T_centered
T_centered
T_filled <- c(T_centered,-tail(T_centered[T_centered>0],k0))
T_filled
sort(dat$mu1_hat)
dat
to_add <- tail(sort(mu_hats[mu_hats>0]),k0)
mu_hats <- dat$mu1_hat
to_add <- tail(sort(mu_hats[mu_hats>0]),k0)
to_add
dat_filled <- rbind(dat,dat[mu1_hats %in% to_add,])
dat[mu1_hats]
dat
mu_hat <- dat$mu1_hat
to_add <- tail(sort(mu_hat[mu_hat>0]),k0)
dat_filled <- rbind(dat,dat[mu1_hat %in% to_add,])
dat_filled
dat_filled[-2,]
dat_filled[-1,]
tail(dat_filled$mu1_hat,2
)
to_add <- tail(sort(mu_hat[mu_hat>0]),k0)
to_add <- dat[mu1_hat %in% to_add,]
to_add$mu1_hat <- -to_add$mu1_hat
dat_filled <- rbind(dat,to_add)
dat_filled
trim_and_fill <- function(dat){
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix)
return(ranks)
}
i <- 0
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
T_filled <- c(T_centered,-tail(T_centered[T_centered>0],k0))
mu_hat <- dat$mu1_hat
to_add <- tail(sort(mu_hat[mu_hat>0]),k0)
to_add <- dat[mu1_hat %in% to_add,]
to_add$mu1_hat <- -to_add$mu1_hat
dat_filled <- rbind(dat,to_add)
return(dat_filled)
}
dat_filled <- trim_and_fill(clt_mix)
clt_mix_filled <- trim_and_fill(clt_mix)
aggregate_mean(clt_mix_filled)
aggregate_mean(clt_mix)
mean(clt_mix$mu1_hat)
mean(clt_mix_filled$mu1_hat)
to_add <- tail(T_sorted,k0)
to_add
to_add <- dat[T_n %in% to_add,]
to_add <- dat[Tn %in% to_add,]
to_add$mu1_hat <- -to_add$mu1_hat
dat_filled <- rbind(dat,to_add)
trim_and_fill <- function(dat){
n <- length(dat$Tn)
T_sorted <- sort(dat$Tn)
k0 <- 0
k0_new <- 0
find_ranks <- function(T_centered,avg_T){
ix <- sort(abs(T_centered),index.return=T)$ix
ranks <- sign(T_centered[ix])*sort(ix)
return(ranks)
}
i <- 0
while(TRUE){
k0 <- k0_new
if (k0==0){
avg_T <- mean(T_sorted)
} else {
T_trimmed <- head(T_sorted,-k0)
avg_T <- mean(T_trimmed)
}
T_centered <- T_sorted-avg_T
ranks <- find_ranks(T_centered,avg_T)
S_rank <- sum(ranks[ranks>0])
k0_new <- round((4*S_rank-n*(n+1))/(2*n-1))
if (k0_new <= k0){
break
}
}
T_filled <- c(T_centered,-tail(T_centered[T_centered>0],k0))
to_add <- tail(T_sorted,k0)
to_add <- dat[Tn %in% to_add,]
to_add$mu1_hat <- -to_add$mu1_hat
dat_filled <- rbind(dat,to_add)
return(dat_filled)
}
clt_mix_filled <- trim_and_fill(clt_mix)
aggregate_mean(clt_mix_filled)
mean(clt_mix$mu1_hat)
mean(clt_mix_filled$mu1_hat)
aggregate_mean(clt_mix)
clt_mix_filled
##Gopas Selection
install.packages("metasens")
##Gopas Selection
#install.packages("metasens")
require("metasens")
##Gopas Selection
install.packages("meta")
help(install.packages)
install.packages("metasens",dependencies=T)
##Gopas Selection
install.packages("metafor")
install.packages("metasens",dependencies=T)
install.packages("meta",dependencies = T)
##Gopas Selection
install.packages("metafor",dependencies = T)
?setREpositories
?setRepositories
setRepositories()
##Gopas Selection
install.packages("metafor",dependencies = T)
##Gopas Selection
devtools::install_github("wviechtb/metafor")
require("installr")
install.packages("installr")
.libPaths()
install.packages(c("data.table", "devtools", "fitdistrplus", "ggplot2", "gridExtra", "metasens", "NMOF", "reshape2"))
require("metasens")
install.packages("metasens")
help(copas)
help("install.packages")
install.packages("Matrix")
.libPaths()
install.packages(c("fitdistrplus", "metasens"))
require("survival")
.libPaths()
a <- .libPaths()
a
help(".libPaths")
.libPaths(.libPaths()[1])
.libPaths
.libPaths()
.libPaths()
.libPaths(a[|])
.libPaths(a[1])
.libPaths()
help("update.packages")
update.packages(ask=FALSE)
.libPaths()
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
.libPaths
.libPaths()
update.packages(ask = FALSE, checkBuilt = TRUE)
exit
