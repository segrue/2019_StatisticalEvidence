theme(
text = element_text(size = font_size, family = font_family),
plot.title = element_text(size = font_size)
) +
geom_segment(aes(x = 0, y = .95, xend = 1, yend = 0.95),
col = "black", size = 0.3, linetype = "dotted"
)
return(CI_plot)
}
p1 <- CI_plotter(ev_bin_mle[n_study==5 & th_emp=="emp" & p0==0.5,]) +
ggtitle(bquote("n" == 5))
p2 <- CI_plotter(ev_bin_ans[n_study==5 & th_emp=="emp" & p0==0.5,])
p3 <- CI_plotter(ev_bin_mle[n_study==10 & th_emp=="emp" & p0==0.5,]) +
ggtitle(bquote("n" == 10))
p4 <- CI_plotter(ev_bin_ans[n_study==10 & th_emp=="emp" & p0==0.5,])
p5 <- CI_plotter(ev_bin_mle[n_study==30 & th_emp=="emp" & p0==0.5,]) +
ggtitle(bquote("n" == 30))
p6 <- CI_plotter(ev_bin_ans[n_study==30 & th_emp=="emp" & p0==0.5,])
p7 <- CI_plotter(ev_bin_mle[n_study==50 & th_emp=="emp" & p0==0.5,]) +
ggtitle(bquote("n" == 50))
p8 <- CI_plotter(ev_bin_ans[n_study==50 & th_emp=="emp" & p0==0.5,])
fig5 <- ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,
ncol = 2, nrow = 4,
align = "hv", legend = "top", common.legend = T,
labels = c("A", "", "B","", "C","","D","")
)
ggsave(
filename = paste0(out_path, figname, ".pdf"), plot = fig5,
width = A4[1], height = 0.85 * A4[2], device = cairo_pdf
)
### Figure 2.6: Normal fit of Tn & Vn based on student distribution ------------
### (fig:normal_fit_student_[Corr])
# define figure name
figname <- paste0("ch2_fig6_normal_fit_student_", corr_student)
# load data
load(paste0(in_path, "student_quantiles_", corr_student, "_5000_20190505.RData"),
verbose = TRUE
)
# variables are
# cdf: cumulative probability
# p0: p under H0
# p1: p under H1
# quantile: x-value corresponding to cumulative probability prob
# id: th = cdf of the normal distribution with mu = ; Zn = cdf of z-score based on binomial
#     Vn = cdf of variance stabilised evidence measure Vn
# n_study: number of samples per simulated study
# plotting multiple plots in one window: https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html
# n=5
cdf_plotter <- function(dat) {
q_min <- min(dat[id == "th", ]$quantile)
q_max <- max(dat[id == "th", ]$quantile)
cdf_plot <- ggplot(data = dat, aes(
x = quantile, y = cdf, col = id,
group = interaction(mu1, id), linetype = factor(mu1)
)) +
geom_line() + scale_color_manual(
name = "F(x):",
labels = c(
bquote(Phi(x - E * "[" * T[n] * "]")), bquote(T[n]),
bquote(V[n] - E * "[" * V[n] * "]" + E * "[" * T[n] * "]")
),
values = c("th" = "black", "Tn" = "blue", "Vn" = "red")
) +
scale_linetype_manual(
name = bquote(H[1] ~ ":"),
labels = c("-2" =
bquote(mu == -2), "0"=bquote(mu == 0),
"2"=bquote(mu == 2)
),
values = c("-2"="solid", "0"="dashed", "2"="dotdash")
) +
ylim(0, 1) + ggtitle(bquote("n" == .(dat$n_study[1]))) +
labs(x = "x", y = "F(x)") + coord_cartesian(xlim = c(q_min, q_max)) +
theme(
text = element_text(size = font_size, family = font_family),
plot.title = element_text(size = font_size)
)
}
qq_plotter <- function(dat) {
q_min <- min(dat[id == "th", ]$quantile)
q_max <- max(dat[id == "th", ]$quantile)
th_quantiles <- qnorm(seq(0.01, 0.99,
along.with = dat[id == "th" & mu1 == -2, quantile]
), 0, 1)
dat$q_theoretical <- rep(th_quantiles, dim(unique(dat[, .(id, mu1)]))[1])
q_plot <- ggplot(data = dat, aes(
x = q_theoretical, y = quantile, col = id,
group = interaction(mu1, id), linetype = factor(mu1)
)) +
geom_line() +
scale_color_manual(
values = c("th" = "black", "Tn" = "blue", "Vn" = "red")
) +
scale_linetype_manual(
name = bquote(H[1] ~ ":"),
labels = c("-2" =
bquote(mu == -2), "0"=bquote(mu == 0),
"2"=bquote(mu == 2)
),
values = c("-2"="solid", "0"="dashed", "2"="dotdash")
) +
labs(x = bquote(Phi^{
-1
} * (x)), y = bquote(F^{
-1
} * (x))) +
coord_cartesian(ylim = c(q_min, q_max)) +
theme(
text = element_text(size = font_size, family = font_family),
legend.position = "none"
)
}
# plot all figures (two for each n_study) on the same page
p1 <- cdf_plotter(student_quantiles[n_study == 5, ])
p2 <- qq_plotter(student_quantiles[n_study == 5, ])
p3 <- cdf_plotter(student_quantiles[n_study == 10, ])
p4 <- qq_plotter(student_quantiles[n_study == 10, ])
p5 <- cdf_plotter(student_quantiles[n_study == 20, ])
p6 <- qq_plotter(student_quantiles[n_study == 20, ])
# p7 <- cdf_plotter(quantiles[quantiles$n_study==30,])
# p8 <- qq_plotter(quantiles[quantiles$n_study==30,])
fig6 <- ggarrange(p1, p2, p3, p4, p5, p6,
ncol = 2, nrow = 3,
align = "hv", legend = "top", common.legend = T,
labels = c("A", "", "B", "", "C", "")
)
ggsave(
filename = paste0(out_path, figname, ".pdf"), plot = fig6,
width = A4[1], height = 0.85 * A4[2], device = cairo_pdf
)
### Figure 2.7: Plot Tn & Vn against mu1 & compare with normal distribution ----
### (fig:evidence_student_[Corr])
# define figure name
figname <- paste0("ch2_fig7_evidence_student_", corr_student)
# load data
load(paste0("data/Ev_Student_", corr_student, "_",n_sim,"_20190504.RData"), verbose = TRUE)
dat <- evidence_student
# plot fit of empirical distribution of Zn and Vn with theoretical dist
fit_plotter <- function(dat) {
dat <- dat[(id %in% c("Tn", "Vn")), ]
y_min <- min(dat[th_emp == "th", ]$evd_mean / sqrt(dat$n_study[1]), na.rm = T)
y_max <- max(dat[th_emp == "th", ]$evd_mean / sqrt(dat$n_study[1]), na.rm = T)
fit_plot <- ggplot(data = dat, aes(
x = mu1, y = evd_mean / sqrt(n_study),
col = id, group = interaction(factor(mu0), th_emp, id),
linetype = th_emp
)) +
geom_line() +
geom_point(
data = dat[mu1 %in% seq(-2, 2, 0.4) & th_emp =="emp", ],
aes(shape = factor(mu0)), alpha = 0.5, size = 1
) +
scale_color_manual(
name = "Statistic:",
labels = c("Vn"= bquote(V[n]),"Tn" = bquote(T[n])),
values = c("Vn" = "red","Tn"="blue")
) +
scale_linetype_manual(
name = "emp/th:",
values = c("th" = "dashed", "emp" = "solid")
) +
coord_cartesian(ylim = c(y_min, y_max)) +
scale_shape_manual(
name = bquote(H[0] * ":"),
labels = c("-2"= bquote(mu == -2), "0" =bquote(mu == 0), "2"= bquote(mu == 2)),
values = c("-2" = 3, "0" = 1, "2" = 4)
) +
labs(x = bquote(mu[1]), y = bquote(tau * "/" * sqrt(n))) +
ggtitle(bquote("n" == .(dat$n_study[1]))) +
theme(
text = element_text(size = font_size, family = font_family),
plot.title = element_text(size = font_size)
)
return(fit_plot)
}
# plot empirical variance around Zn and Vn
sd_plotter <- function(dat) {
dat <- dat[(id %in% c("Tn", "Vn")) & mu0==0,]
y_min <- min(dat[th_emp == "th", ]$evd_mean / sqrt(dat$n_study[1]), na.rm = T)
y_max <- max(dat[th_emp == "th", ]$evd_mean / sqrt(dat$n_study[1]), na.rm = T)
# dat_th <- dat[th_emp == "th" & id=="Zn" & mu0 == 0, ]
# dat_emp <- dat[(id %in% c("Tn", "Vn")) & mu0==0 & th_emp == "emp", ]
sd_plot <- ggplot(
data = dat[th_emp == "emp",],
aes(
x = mu1, y = evd_mean / sqrt(n_study),
col = id, group = interaction(factor(mu0), th_emp, id),
linetype = th_emp
)
) + geom_line() + geom_ribbon(aes(
ymin = (evd_mean - evd_sd) / sqrt(n_study),
ymax = (evd_mean + evd_sd) / sqrt(n_study), fill = id
),
alpha = 0.5, linetype = "blank"
) +
geom_ribbon(
data = dat[th_emp == "th", ],
aes(
ymin = (evd_mean - evd_sd) / sqrt(n_study),
ymax = (evd_mean + evd_sd) / sqrt(n_study)
),
alpha = 1, fill=NA
) +
geom_point(
data = dat[mu1 %in% seq(-2, 2, 0.4) & th_emp == "emp", ],
aes(shape = factor(mu0)), alpha = 0.5, size = 1
)  +
scale_color_manual(
name = "Statistic:",
labels = c("Tn" = bquote(T[n]), "Vn"= bquote(V[n])),
values = c("Tn" = "blue", "Vn" = "red"),
guide = F
) +
scale_fill_manual(
name = "Statistic:",
labels = c("Tn" = bquote(T[n]), "Vn"= bquote(V[n])),
values = c("Tn" = "blue", "Vn" = "red")
) +
scale_shape_manual(
name = bquote(H[0] * ":"),
labels = c("-2"= bquote(mu == -2), "0" = bquote(mu == 0), "2"= bquote(mu == 2)),
values = c("-2" = 3, "0" = 1, "2" = 4)
) +
coord_cartesian(ylim = c(y_min, y_max)) +
labs(x = bquote(mu[1]), y = bquote(tau * "/" * sqrt(n))) +
theme(text = element_text(size = font_size, family = font_family))
return(sd_plot)
}
p1 <- fit_plotter(dat[dat$n_study == 10, ])
p2 <- sd_plotter(dat[dat$n_study == 10, ])
p3 <- fit_plotter(dat[dat$n_study == 30, ])
p4 <- sd_plotter(dat[dat$n_study == 30, ])
p5 <- fit_plotter(dat[dat$n_study == 50, ])
p6 <- sd_plotter(dat[dat$n_study == 50, ])
fig7 <- ggarrange(p1, p2, p3, p4, p5, p6,
ncol = 2, nrow = 3,
align = "hv", legend = "top", common.legend = T,
labels = c("A", "", "B", "", "C", "")
)
ggsave(
filename = paste0(out_path, figname, ".pdf"), plot = fig7,
width = A4[1], height = 0.85 * A4[2], device = cairo_pdf
)
### Figure 2.8: Plot Power of Zn, Vn & Student -----------------------------------
### (fig:power_student_[Corr])
# define figure name
figname <- paste0("ch2_fig8_power_student_", corr_student)
# load data
load(paste0("data/Ev_Student_", corr_student, "_",n_sim,"_20190504.RData"), verbose = TRUE)
dat <- evidence_student
# plot power curves
power_plotter <- function(dat) {
# dat_emp <- dat[th_emp == "emp" & (id %in% c("Vn", "Tn")), ]
# dat_th <- dat[th_emp == "th" & id=="Zn", ]
dat <- dat[th_emp == "emp",]
power_plot <- ggplot(data = dat, aes(
x = mu1,y=power,col=id,group=interaction(mu0,th_emp,id),linetype=th_emp)) +
geom_line(alpha=0.5) +
scale_color_manual(
name = "Test:",
labels = c("Zn" = bquote(T[n] > z[(1-alpha)]), "Vn"= bquote(V[n]> z[(1-alpha)]),
"Tn" = bquote(T[n] > t[(n-1*","*1-alpha)])),
values = c("Zn" = "blue", "Vn" = "red", "Tn" = "black")
) +
geom_point(
data = dat[mu1 %in% seq(-2, 2, 0.4), ],
aes(shape = factor(mu0)), alpha = 0.5, size = 1
) +
scale_linetype_manual(
name = "emp/th:",
values = c("th" = "dashed", "emp" = "solid"),
drop = F,
guide = F
) +
scale_shape_manual(
name = bquote(H[0] * ":"),
labels = c("-2"= bquote(mu == -2), "0" =bquote(mu == 0), "2"= bquote(mu == 2)),
values = c("-2" = 3, "0" = 1, "2" = 4)
) +
labs(x = bquote(mu[1]), y = bquote("1-"*beta)) +
theme(
text = element_text(size = font_size, family = font_family),
plot.title = element_text(size = font_size)
) +
geom_segment(aes(x = -2, y = 0.05, xend = 2, yend = 0.05),
col = "black", size = 0.3, linetype = "dotted"
) +
geom_segment(aes(x = -2, y = 0, xend = -2, yend = 1),
col = "black", size = 0.3, linetype = "dotted"
) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 1),
col = "black", size = 0.3, linetype = "dotted"
) +
geom_segment(aes(x = 2, y = 0, xend = 2, yend = 1),
col = "black", size = 0.3, linetype = "dotted"
)
return(power_plot)
}
# p0 <- power_plotter(dat[n_study==5 & th_emp=="emp",])
p1 <- power_plotter(dat[n_study==10,])
p2 <- power_plotter(dat[n_study==30 & th_emp == "emp",])
p3 <- power_plotter(dat[n_study==50 & th_emp == "emp",])
#p4 <- power_plotter(dat[n_study==100 & th_emp == "emp",])
fig8 <- ggarrange(
# p0 + ggtitle(bquote("n" == 5)),
# p0 + coord_cartesian(ylim=c(0,0.1)),
p1 + ggtitle(bquote("n" == 10)),
p1 + coord_cartesian(ylim=c(0,0.1)),
p2 + ggtitle(bquote("n" == 30)),
p2 +coord_cartesian(ylim=c(0,0.1)),
p3 + ggtitle(bquote("n" == 50)),
p3 + coord_cartesian(ylim=c(0,0.1)),
# p4 + ggtitle(bquote("n" == 100)),
# p4 + coord_cartesian(ylim=c(0,0.1)),
ncol = 2, nrow = 3,
align = "hv", legend = "top", common.legend = T,
labels = c("A", "", "B","", "C","")
)
ggsave(
filename = paste0(out_path, figname, ".pdf"), plot = fig8,
width = A4[1], height = 0.85 * A4[2], device = cairo_pdf
)
### Figure 2.9: Plot CI of Zn, Vn & Student T ----------------------------------
### (fig:CI_student)
# define figure name
figname <- paste0("ch2_fig9_CI_student")
# load data
load(paste0("data/Ev_Student_MLE_",n_sim,"_20190504.RData"), verbose = TRUE)
ev_stud_mle <- evidence_student
load(paste0("data/Ev_Student_Corr_",n_sim,"_20190504.RData"), verbose = TRUE)
ev_stud_corr <- evidence_student
# plot üpwer curves
CI_plotter <- function(dat) {
dat <- dat[th_emp == "emp",]
CI_plot <- ggplot(data = dat, aes(
x = mu1,y=CI,col=id,group=interaction(mu0,id,th_emp,n_study))) +
geom_line(alpha=1) +
scale_color_manual(
name = "CI:",
labels = c("Zn" = bquote(T[n]~"\U00B1"*z[(1-alpha)]),
"Vn"= bquote(V[n]~"\U00B1"*z[(1-alpha)]),
"Tn" = T[n]~"\U00B1"*t[(n-1*","*1-alpha)]),
values = c("Zn" = "blue", "Vn" = "red","Tn" = "black")
) +
scale_shape_manual(
name = bquote(H[0] * ":"),
labels = c("-2"= bquote(mu == -2), "0" =bquote(mu == 0), "2"= bquote(mu == 2)),
values = c("-2" = 3, "0" = 1, "2" = 4)
) +
# scale_linetype_manual(
#   name = bquote(H[0] * ":"),
#   labels = c(bquote(mu == -2), bquote(p == 0.5), bquote(p == 0.9)),
#   values = c("0.1" = "solid", "0.5" = "dashed", "0.9" = "dotdash")
# ) +
geom_point(
data = dat[mu1 %in% seq(-2, 2, 0.4), ],
aes(shape = factor(mu0)), alpha = 0.5, size = 1
) +
labs(x = bquote(mu[1]), y = "Coverage") +
theme(
text = element_text(size = font_size, family = font_family),
plot.title = element_text(size = font_size)
) +
geom_segment(aes(x = -2, y = .95, xend = 2, yend = 0.95),
col = "black", size = 0.3, linetype = "dotted"
) + coord_cartesian(ylim=c(0.75,1))
return(CI_plot)
}
p1 <- CI_plotter(ev_stud_mle[n_study==5 & mu0==0,]) +
ggtitle(bquote("n" == 5))
p2 <- CI_plotter(ev_stud_corr[n_study==5& mu0==0,])
p3 <- CI_plotter(ev_stud_mle[n_study==10 & mu0==0,]) +
ggtitle(bquote("n" == 10))
p4 <- CI_plotter(ev_stud_corr[n_study==10 & mu0==0,])
p5 <- CI_plotter(ev_stud_mle[n_study==30 & mu0==0,]) +
ggtitle(bquote("n" == 30))
p6 <- CI_plotter(ev_stud_corr[n_study==30 & mu0==0,])
p7 <- CI_plotter(ev_stud_mle[n_study==50 & mu0==0,]) +
ggtitle(bquote("n" == 50))
p8 <- CI_plotter(ev_stud_corr[n_study==100 & mu0==0,])
fig9 <- ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,
ncol = 2, nrow = 4,
align = "hv", legend = "top", common.legend = T,
labels = c("A", "", "B","", "C","","D","")
)
ggsave(
filename = paste0(out_path, figname, ".pdf"), plot = fig9,
width = A4[1], height = 0.85 * A4[2], device = cairo_pdf
)
### import packages ----
#for data handling
require("reshape2") #https://stackoverflow.com/questions/21563864/ggplot2-overlay-density-plots-r
require("data.table")
#custom functions
source("./functions/helper_functions.R")
### Define starting assumptions and conditions ----
# hypotheses:
# H0: p = mu0
# H1: p > mu0
n_studies <- c(5,10,20,30,40,50,100)
n_sim <- 1e5
mu0s <- seq(-2,2,by=2)
mu1s <- seq(-2,2,by=0.1)
sgm0 <- sgm1 <- 2
alphas <- c(0.05)
evd_corr <- T #whether finite sample correction should be used or not when calculating vst
seed <- 20190504
set.seed(seed)
correction <- ifelse(evd_corr,"Corr","MLE")
name <- paste0("Ev_Student_",correction,"_",n_sim,"_",seed)
### simulate values ----
#https://stackoverflow.com/questions/34999019/apply-a-function-to-all-pairwise-combinations-of-list-elements-in-r
cols_evidence <- c("mu0","mu1","evd_mean","evd_sd","th_emp","id","n_study")
cols_tot <- c("mu0","mu1","evd_mean","evd_sd","th_emp","id","n_study","alpha","CI","power")
evidence_student <- data.table(matrix(NA,nrow=0,ncol=10))
colnames(evidence_student) <- cols_tot
i <- 1
for (n_study in n_studies) {
start.time <- Sys.time()
#calculate empirical and theoretical mus
set.seed(seed)
mu1_hats <- sapply(mu1s,function(mu1) sapply(1:n_sim, function(y) mean(rnorm(n_study,mu1,sgm0))))
#calculate empirical and theoretical sgm
set.seed(seed)
#note: one could also simply sample the variances from a chi-square distribution
sgm_hats <- sapply(1:length(mu1s),
function(mu1) sapply(1:n_sim,
function(sim) sqrt(1/(n_study-1)*sum((rnorm(n_study,mu1s[mu1],sgm0)-mu1_hats[sim,mu1])^2))))
sgm_th <- matrix(rep(sgm0,length(mu1_hats)),n_sim,length(mu1s),byrow=TRUE)
#calculate theoretical and empiral evidence based on Zn-vst
#this gives the distribution of the values if the Zn holds, i.e. if we know the sd
#question: can I use empirical SE to calculate Zn_th > how is distribution of this statistic?
Zn_emp <- calc_evidence(mu0s,mu1_hats,sgm_hats,n_study,z_stat_norm,evd_corr)
Zn_emp_avg <- avg_evidence(Zn_emp,mu0s,mu1s)
Zn_emp_sd <- sd_evidence(Zn_emp,mu0s,mu1s)
Zn_th_avg <- sapply(mu1s,function(mu1) z_stat_norm(mu0s,mu1,sgm0,n_study))
Zn_th_sd <- matrix(1,nrow=dim(Zn_th_avg)[1],ncol=dim(Zn_th_avg)[2])
Zn <- rbind(dat_transform(Zn_emp_avg,Zn_emp_sd,"emp","Zn",n_study,cols_evidence,mu0s,mu1s),
dat_transform(Zn_th_avg,Zn_th_sd,"th","Zn",n_study,cols_evidence,mu0s,mu1s))
#calculate theoretical and empirical evidence based on clt-vst, but using empirical sd instead of theoretical
#this gives us values if we assume the clt holds, but we do not know the sd and just use the empirical sd instead
Tn_emp <- calc_evidence(mu0s,mu1_hats,sgm_hats,n_study,z_stat_norm,evd_corr=F)
#Tn_th_avg <- avg_evidence(Tn_th)
Tn_emp_avg <- avg_evidence(Tn_emp,mu0s,mu1s)
Tn_emp_sd <- sd_evidence(Tn_emp,mu0s,mu1s)
Tn_th_avg <- Zn_th_avg
Tn_th_sd <- Zn_th_sd
#note that the "theoretical" distribution of Tn is the same as the theoretical
#distribution of Zn, which admittedly is pretty nonsensical in this context
Tn <-  rbind(dat_transform(Tn_emp_avg,Tn_emp_sd,"emp","Tn",n_study,cols_evidence,mu0s,mu1s),
dat_transform(Tn_th_avg,Tn_th_sd,"th","Tn",n_study,cols_evidence,mu0s,mu1s))
#calculate theoretical and empiral evidence based on Student-t vst
#question: does it make sense to use theoretical mu1 but empirical sigma_est?
Vn_emp <- calc_evidence(mu0s,mu1_hats,sgm_hats,n_study,vst_student,evd_corr=evd_corr)
Vn_emp_avg <- avg_evidence(Vn_emp,mu0s,mu1s)
Vn_emp_sd <- sd_evidence(Vn_emp,mu0s,mu1s)
Vn_th_avg <- sapply(mu1s,function(mu1) vst_student(mu0s,mu1,sgm0,n_study))
Vn_th_sd <- Zn_th_sd
Vn <- rbind(dat_transform(Vn_emp_avg,Vn_emp_sd,"emp","Vn",n_study,cols_evidence,mu0s,mu1s),
dat_transform(Vn_th_avg,Vn_th_sd,"th","Vn",n_study,cols_evidence,mu0s,mu1s))
#calculate power & confidence intervals
for (alph in alphas){
#confidence_intervals
crit_val_ci_norm <- qnorm((1-alph/2),0,1)
crit_val_ci_stud <- qt((1-alph/2),n_study-1,0)
emp_ci_Zn <- avg_evidence(ci_coverage(Zn_emp,Zn_th_avg,crit_val_ci_norm),mu0s,mu1s)
emp_ci_Tn <- avg_evidence(ci_coverage(Tn_emp,Zn_th_avg,crit_val_ci_stud),mu0s,mu1s)
emp_ci_Vn <- avg_evidence(ci_coverage(Vn_emp,Vn_th_avg,crit_val_ci_norm),mu0s,mu1s)
th_ci <- matrix((1-alph),nrow=dim(emp_ci_Zn)[1],ncol=dim(emp_ci_Zn)[2])
ci_Zn <- rbind(melt(emp_ci_Zn),melt(th_ci))$value
ci_Tn <- rbind(melt(emp_ci_Tn),melt(th_ci))$value
ci_Vn <- rbind(melt(emp_ci_Vn),melt(th_ci))$value
Zn <- cbind(Zn,alph,ci_Zn)
Tn <- cbind(Tn,alph,ci_Tn)
Vn <- cbind(Vn,alph,ci_Vn)
colnames(Vn) <- c(cols_evidence,"alpha","CI")
#calculate theoretical and empirical power for test using the exact noncentral Student t test
crit_val_stud <- qt(alph,n_study-1,0,lower.tail=FALSE)
pows_avg_Tn_th <- sapply(mu1s, function(mu1) sapply(mu0s, function(mu0) 1-pt(crit_val_stud,n_study-1,z_stat_norm(mu0,mu1,sgm0,n_study))))
pows_avg_Tn_emp <- avg_evidence(1*(Tn_emp>crit_val_stud),mu0s,mu1s)
pows_avg_Tn <- rbind(melt(pows_avg_Tn_emp),melt(pows_avg_Tn_th))$value
#calculate theoretical and empirical power for test using the Tn and the normal distribution
#"abused" Z-test, because Z was calculated using the empirical variance, not the theoretical
#note: I always use sd=1 to calculate power > but: this assumption only holds in certain areas (question)
crit_val_norm <- qnorm(alph,mean=0,sd=1,lower.tail=FALSE)
pows_avg_Zn_th <- sapply(mu1s, function(mu1) sapply(mu0s, function(mu0) 1-pnorm(crit_val_norm,z_stat_norm(mu0,mu1,sgm0,n_study),sd=1)))
pows_avg_Zn_emp <- avg_evidence(1*(Zn_emp>crit_val_norm),mu0s,mu1s)
pows_avg_Zn <- rbind(melt(pows_avg_Zn_emp),melt(pows_avg_Zn_th))$value
#calculate theoretical and empirical power for test using the vst (non-central Student t distribution)
#question: should I be using the theoretical or empirical variance here?
pows_avg_Vn_th <- sapply(mu1s, function(mu1) sapply(mu0s, function(mu0) 1-pnorm(crit_val_norm,vst_student(mu0,mu1,sgm0,n_study),sd=1)))
pows_avg_Vn_emp <- avg_evidence(1*(Vn_emp>crit_val_norm),mu0s,mu1s)
pows_avg_Vn <- rbind(melt(pows_avg_Vn_emp),melt(pows_avg_Vn_th))$value
#maybe replace sd_th with sd_emp?
#question: in this case, isn't the maximum evidence 1?
#question: what standard deviation do we use? the empirical or the theoretical?
#question: how do we know that approximate standard normality holds for vst?
#question: is it prudent to use the theoretical mu1s to calculate the theoretical power for the student vst?
#combine coverages & power to dataframe
Zn <- cbind(Zn,pows_avg_Zn)
colnames(Zn) <- cols_tot
Tn <- cbind(Tn,pows_avg_Tn)
colnames(Tn) <- cols_tot
Vn <- cbind(Vn,pows_avg_Vn)
colnames(Vn) <- cols_tot
evidence_student <- rbind(evidence_student,Zn,Tn,Vn)
}
diff.time <- Sys.time()-start.time
print(paste0("round ",i," is done in ",round(diff.time,2), " ",attributes(diff.time)$units))
i <- i+1
}
save(evidence_student, file = paste0("data/",name,".RData")) #save data so that it doesn't have to be computed again and again
